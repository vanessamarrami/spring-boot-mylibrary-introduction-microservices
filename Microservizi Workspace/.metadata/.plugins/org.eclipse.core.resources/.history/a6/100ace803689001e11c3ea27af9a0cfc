package com.statistics.service;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;
import com.statistics.client.LibraryClient;
import com.statistics.dto.AuthorDto;
import com.statistics.dto.BookDto;
import com.statistics.dto.BookSlimDto;
import com.statistics.exception.NotFoundException;

import feign.FeignException.FeignClientException;

@Service
public class StatisticsLibraryService {
	
	@Autowired
	LibraryClient client;
	
	@HystrixCommand(fallbackMethod = "fallbackMethod")
	public String getInstance() {
		return client.getInstanceId();
	}
	
	@HystrixCommand(fallbackMethod = "fallbackMethod")
	public int numberOfTotalBooks() {
		List<BookDto> books = new ArrayList<>();
		try {
			books = client.listAllBook();
		}catch(FeignClientException e) {
			throw new NotFoundException("There is no book!");
		}		
		return books.size();
	}
	
	@HystrixCommand(fallbackMethod = "fallbackMethod")
	public int basedGenre(String genre) {
		List<BookDto> books = new ArrayList<>();
		try {
			books = client.getByGenre(genre);
		}catch(FeignClientException e) {
			throw new NotFoundException(String.format("There are no books with genre %s!", genre));
		}
		return books.size();
	}
	
	@HystrixCommand(fallbackMethod = "fallbackMethod")
	public int basedPublicationDate(LocalDate date) {
		List<BookDto> books = new ArrayList<>();
		try {
			books = client.getAfterPublicationDate(date);
		}catch(FeignClientException e) {
			throw new NotFoundException(String.format("There are no books published after %s!", date));
		}
		return books.size();
	}
	
	@HystrixCommand(fallbackMethod = "fallbackMethod")
	public int basedAuthor(String firstName, String lastName) {
		AuthorDto author = new AuthorDto();
		try {
			author = client.listAuthorByNameAndSurname(firstName, lastName);
		}catch(FeignClientException e) {
			throw new NotFoundException("There is no author with the specified name.");
		}
		Set<BookSlimDto> books = author.getBooks();
		return books.size();
	}
	
	public double percent(double a, double b) {
		return a / b * 100; 
	}
	
	public String fallbackMethod(Exception ex){
		return "Tutti i tentativi sono falliti";
	}
}
